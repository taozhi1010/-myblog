const Cookie = require('js-cookie');
const SHA256 = require("crypto-js/sha256");
const debounce = require('lodash/debounce');

const CrossEnv = {};

const SERVER_SIG_KEY = '_crossenv.sig.server';
const CLIENT_SIG_KEY = '_crossenv.sig.client';
const DATA_KEY = '_crossenv';

const removeCookie = (key) => {
    Cookie.remove(key);
};

CrossEnv.install = function (Vue, options) {
    // 从cookie初始化数据
    const jsonData = Cookie.get(DATA_KEY);

    if (jsonData) {
        localStorage.setItem(DATA_KEY, jsonData);
        const clientSig = `${SHA256(jsonData).toString()}:${new Date().valueOf()}`;
    
        // 增加客户端数据标识，并删除数据
        Cookie.set(CLIENT_SIG_KEY, clientSig);
        removeCookie(DATA_KEY);
    } else {
        // 如果cookie中没有数据，则查看localStorage中有没有数据
        // 如果有，则数据正常
        // 如果没有，则数据不正常，删除cookie中的client sig
        const jsonData = localStorage.getItem(DATA_KEY);
        if (!jsonData) {
            removeCookie(CLIENT_SIG_KEY);
        }
    }

    // 监听ajax请求，发生请求时，执行检查
    var send = window.XMLHttpRequest.prototype.send;
    function sendReplacement(data) {
        if(this.onreadystatechange && !this._onreadystatechange) this._onreadystatechange = this.onreadystatechange;
        this.onreadystatechange = onReadyStateChangeReplacement;
        return send.apply(this, arguments);
    }
    function onReadyStateChangeReplacement() {
        debounceUpdateData();
        if (this._onreadystatechange) return this._onreadystatechange.apply(this, arguments);
    }
    const debounceUpdateData = debounce(() => {
        updataData();
    });
    window.XMLHttpRequest.prototype.send = sendReplacement;

    // 在某个时间节点触发数据更新
    function updataData() {
        // 检测客户端标识和服务端表示是否一致，不一致，则更新数据
        const serverSig = Cookie.get(SERVER_SIG_KEY);
        const clientSig = Cookie.get(CLIENT_SIG_KEY);

        const serverHash = serverSig ? serverSig.split(':')[0] : '';
        const clientHash = clientSig ? clientSig.split(':')[0] : '';

        if (serverHash !== clientHash) {
            // 读取数据
            const jsonData = Cookie.get(DATA_KEY);
            jsonData && localStorage.setItem(DATA_KEY, jsonData);
            // 操作cookie
            const clientSig = `${SHA256(jsonData).toString()}:${new Date().valueOf()}`;
            Cookie.set(CLIENT_SIG_KEY, clientSig);
            removeCookie(DATA_KEY);
        } else {
            removeCookie(DATA_KEY);
        }
    }

    Vue.$crossenv = Vue.prototype.$crossenv = window.$crossenv = {
        get data() {
            const jsonData = localStorage.getItem(DATA_KEY);
            return JSON.parse(jsonData) || {};
        }
    }
}

export default CrossEnv;
