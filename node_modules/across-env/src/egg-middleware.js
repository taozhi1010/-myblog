const SHA256 = require("crypto-js/sha256");

module.exports = function (data, options) {
    let crossData = data;
    let jsonData = JSON.stringify(crossData);
    let serverSig = `${SHA256(jsonData).toString()}:${new Date().valueOf()}`;
    let updateFlag = true;

    options = options || {
        maxAge: 30 * 60 * 60 * 24 * 1000 * 12,
        httpOnly: false,
        signed: false
    }

    return async function (ctx, next) {
        ctx.$crossenv = {
            data: crossData,
            setCrossEnv,
            getCrossEnv,
            removeCorssEnv
        };
        await next();
        if (updateFlag) {
            ctx.cookies.set('_crossenv', jsonData, options);
            ctx.cookies.set('_crossenv.sig.server', serverSig, options);
        } else {
            // 前后台数据一致性校验
            const clientSig = ctx.cookies.get('_crossenv.sig.client', {
                signed: false
            });

            const serverHash = serverSig ? serverSig.split(':')[0] : '';
            const clientHash = clientSig ? clientSig.split(':')[0] : '';

            // 数据校验不一致
            if (serverHash !== clientHash) {
                ctx.cookies.set('_crossenv', jsonData, options);
                ctx.cookies.set('_crossenv.sig.server', serverSig, options);
            }
        }
        updateFlag = false;
    }

    // 更新数据标识
    function updateSig () {
        jsonData = JSON.stringify(crossData);
        serverSig = `${SHA256(jsonData).toString()}:${new Date().valueOf()}`;
        updateFlag = true;
    }

    function setCrossEnv (key, value) {
        if (key === undefined || value === undefined) throw new Error('across-env:缺少参数');
        crossData[key] = value;
        updateSig();
    }
    function getCrossEnv (key) {
        if (key === undefined) throw new Error('across-env:缺少参数');
        return crossData[key];
    }
    function removeCorssEnv (key) {
        delete crossData[key];
        updateSig();
    }
}